const express = require("express");
const router = express.Router();
const { body, validationResult } = require("express-validator");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const jwtSecret = process.env.JWT_SECRET || "secretkey";

// Signup (Normal user)
router.post("/signup", [
  body("name").isLength({ min: 20, max: 60 }),
  body("email").isEmail(),
  body("password").isLength({ min:8, max:16 }).matches(/[A-Z]/).matches(/[^A-Za-z0-9]/),
  body("address").isLength({ max: 400 })
], async (req,res) => {
  const errors = validationResult(req);
  if(!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { name,email,password,address } = req.body;
  try {
    const exists = await User.findOne({ where: { email }});
    if(exists) return res.status(400).json({ msg: "Email already registered" });
    const hashed = await bcrypt.hash(password, 10);
    const user = await User.create({ name,email,password: hashed,address,role:"user" });
    const token = jwt.sign({ id: user.id, role: user.role }, jwtSecret, { expiresIn: "7d" });
    res.json({ token, user: { id: user.id, name: user.name, email: user.email, role: user.role }});
  } catch(err) {
    console.error(err); res.status(500).send("Server error");
  }
});

// Login (all roles)
router.post("/login", [
  body("email").isEmail(),
  body("password").exists()
], async (req,res) => {
  const errors = validationResult(req);
  if(!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { email, password } = req.body;
  try {
    const user = await User.findOne({ where: { email }});
    if(!user) return res.status(400).json({ msg: "Invalid credentials" });
    const isMatch = await bcrypt.compare(password, user.password);
    if(!isMatch) return res.status(400).json({ msg: "Invalid credentials" });
    const token = jwt.sign({ id: user.id, role: user.role }, jwtSecret, { expiresIn: "7d" });
    res.json({ token, user: { id: user.id, name: user.name, email: user.email, role: user.role }});
  } catch(err) {
    console.error(err); res.status(500).send("Server error");
  }
});

module.exports = router;
